{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPIms4MPClFhuRT3oxIGx3z",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hchamane/codio.essex/blob/master/OOP%20Exercises%20-%20Unit1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.\tDevelop a Python program and apply protected and unprotected variables."
      ],
      "metadata": {
        "id": "0pWAec28a7ZE"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rttut5beZ5xw",
        "outputId": "83b93625-17c6-4aea-ed1c-04c1b99d7b0f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hainadine\n",
            "45\n",
            "40\n",
            "50\n"
          ]
        }
      ],
      "source": [
        "class Person:\n",
        "    def __init__(self, name, age):\n",
        "        self.name = name\t\t# Unprotected variable\n",
        "        self._age = age\t\t# Protected variable\n",
        "    \n",
        "    def get_age(self):\n",
        "        return self._age\n",
        "    \n",
        "    def set_age(self, age):\n",
        "        self._age = age\n",
        "        \n",
        "person1 = Person(\"Hainadine\", 45)\n",
        "\n",
        "print(person1.name)\t\t# Output: Hainadine\n",
        "print(person1.get_age())\t\t# Output: 45\n",
        "\n",
        "person1._age = 40\t\t# Unprotected access to protected variable\n",
        "print(person1.get_age())\t\t# Output: 40\n",
        "\n",
        "person1.set_age(50)\t\t# Protected access to protected variable\n",
        "print(person1.get_age())\t\t# Output: 50\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.\tExercise 15.1\n",
        "Write a definition for a class named Circle with attributes center and radius, where center is a Point object and the radius is a number.\n",
        "\n",
        "Instantiate a Circle object that represents a circle with its center at (150,100) and radius 75.\n",
        "\n",
        "Write a function named point_in_circle that takes a Circle and a Point and returns True if the Point lies in or on the circle’s boundary.\n",
        "\n",
        "Write a function named rect_in_circle that takes a Circle and a Rectangle and returns True if the Rectangle lies entirely in or on the circle’s boundary.\n",
        "\n",
        "Write a function named rect_circle_overlap that takes a Circle and a Rectangle and returns True if any of the Rectangle’s corners fall inside the circle. Alternatively, as a more challenging version, return True if any part of the Rectangle falls inside the circle.\n"
      ],
      "metadata": {
        "id": "NBsosgxjayff"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Point:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "class Circle:\n",
        "    def __init__(self, center, radius):\n",
        "        self.center = center\n",
        "        self.radius = radius\n",
        "        \n",
        "def point_in_circle(circle, point):\n",
        "    distance = (point.x - circle.center.x) ** 2 + (point.y - circle.center.y) ** 2\n",
        "    return distance <= circle.radius ** 2\n",
        "\n",
        "class Rectangle:\n",
        "    def __init__(self, p1, p2):\n",
        "        self.p1 = p1\n",
        "        self.p2 = p2\n",
        "        \n",
        "def rect_in_circle(circle, rect):\n",
        "#Check if all four corners of the rectangle are inside or on the circle's boundary\n",
        "    return point_in_circle(circle, rect.p1) and point_in_circle(circle, Point(rect.p1.x, rect.p2.y)) and point_in_circle(circle, rect.p2) and point_in_circle(circle, Point(rect.p2.x, rect.p1.y))\n",
        "\n",
        "def rect_circle_overlap(circle, rect):\n",
        "# Check if any corner of the rectangle is inside the circle\n",
        "    if point_in_circle(circle, rect.p1) or point_in_circle(circle, Point(rect.p1.x, rect.p2.y)) or point_in_circle(circle, rect.p2) or point_in_circle(circle, Point(rect.p2.x, rect.p1.y)):\n",
        "        return True\n",
        "    \n",
        "# Check if any part of the rectangle is inside the circle\n",
        "    for x in range(rect.p1.x, rect.p2.x):\n",
        "        for y in range(rect.p1.y, rect.p2.y):\n",
        "            if point_in_circle(circle, Point(x, y)):\n",
        "                return True\n",
        "    \n",
        "    return False\n",
        "\n",
        "# Instantiate a Circle object with center (150, 100) and radius 75\n",
        "c = Circle(Point(150, 100), 75)\n"
      ],
      "metadata": {
        "id": "3y5tKLW2aq53"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Remove any printing from your code and then add the following to the end:\n",
        "\n",
        "def main():\n",
        "    box = Rectangle()\n",
        "    box.width = 100.0\n",
        "    box.height = 200.0\n",
        "    box.corner = Point()\n",
        "    box.corner.x = 50.0\n",
        "    box.corner.y = 50.0\n",
        "\n",
        "    circle = Circle\n",
        "    circle.center = Point()\n",
        "    circle.center.x = 150.0\n",
        "    circle.center.y = 100.0\n",
        "    circle.radius = 75.0\n",
        "\n",
        "    print(point_in_circle(box.corner, circle))\n",
        "    print(rect_in_circle(box, circle))\n",
        "    print(rect_circle_overlap(box, circle))\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()\n",
        "\n",
        "Then, submit your code using the button below:\n",
        "\n"
      ],
      "metadata": {
        "id": "B95hIq33bJ3S"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Point:\n",
        "  def __init__(self, x, y):\n",
        "    self.x = x\n",
        "    self.y = y\n",
        "\n",
        "class Circle:\n",
        "  def __init__(self, center, radius):\n",
        "    self.center = center\n",
        "    self.radius = radius\n",
        "        \n",
        "def point_in_circle(circle, point):\n",
        "  distance = (point.x - circle.center.x) ** 2 + (point.y - circle.center.y) ** 2\n",
        "  return distance <= circle.radius ** 2\n",
        "\n",
        "class Rectangle:\n",
        "  def __init__(self):\n",
        "    self.width = 0.0\n",
        "    self.height = 0.0\n",
        "    self.corner = Point(0.0, 0.0)\n",
        "        \n",
        "def rect_in_circle(circle, rect):\n",
        "  return point_in_circle(circle, rect.corner) and point_in_circle(circle, Point(rect.corner.x, rect.corner.y + rect.height)) and point_in_circle(circle, Point(rect.corner.x + rect.width, rect.corner.y + rect.height)) and point_in_circle(circle, Point(rect.corner.x + rect.width, rect.corner.y))\n",
        "\n",
        "def rect_circle_overlap(circle, rect):\n",
        "  if point_in_circle(circle, rect.corner) or point_in_circle(circle, Point(rect.corner.x, rect.corner.y + rect.height)) or point_in_circle(circle, Point(rect.corner.x + rect.width, rect.corner.y + rect.height)) or point_in_circle(circle, Point(rect.corner.x + rect.width, rect.corner.y)):\n",
        "    return True\n",
        "    \n",
        "  for x in range(int(rect.corner.x), int(rect.corner.x + rect.width)):\n",
        "    for y in range(int(rect.corner.y), int(rect.corner.y + rect.height)):\n",
        "      if point_in_circle(circle, Point(x, y)):\n",
        "        return True\n",
        "    \n",
        "  return False\n",
        "\n",
        "def main():\n",
        "    box = Rectangle()\n",
        "    box.width = 100.0\n",
        "    box.height = 200.0\n",
        "    box.corner = Point(50.0, 50.0)\n",
        "\n",
        "    circle = Circle(Point(150.0, 100.0), 75.0)\n",
        "\n",
        "    print(point_in_circle(circle, box.corner))\n",
        "    print(rect_in_circle(circle, box))\n",
        "    print(rect_circle_overlap(circle, box))\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mbMK2mzkbU9n",
        "outputId": "b023cd5b-89a4-4a85-e79f-1eb8ef25293a"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "False\n",
            "True\n"
          ]
        }
      ]
    }
  ]
}